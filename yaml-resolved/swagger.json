---
swagger: "2.0"
info:
  description: |
    The internet is increasingly becoming an integral part of lives. Ever since the invention of electronic mail by Ray Tomlinson, emails have grown to become the primary medium of exchanging information over the internet between two or more people, until the advent of Instant Messaging (IM) Apps.

    As EPIC Andelans who work towards advancing human potential and giving back to the society, we wish to empower others by building a web app that helps people exchange messages/information over the internet.
  version: v1
  title: EPIC mail
  contact:
    email: ivankivu@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /Ivankivu/EPICmail/1.0.0
schemes:
- https
- http
paths:
  /messages:
    get:
      tags:
      - messages
      summary: Returns received messages by status
      description: Returns a map of status codes to quantities
      operationId: getMessages
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
    post:
      tags:
      - messages
      summary: Send a message to an Indvidual
      operationId: sendMessage
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: message sent by user
        required: true
        schema:
          $ref: '#/definitions/Message'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid Message
  /messages/sent:
    get:
      tags:
      - messages
      summary: Find message by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: sent
      produces:
      - application/json
      - application/xml
      parameters:
      - name: messageId
        in: path
        description: ID of message that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
  /messages/unread:
    get:
      tags:
      - messages
      summary: Find messages by status
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: status
      produces:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
  /messages/(int:messageId):
    get:
      tags:
      - messages
      summary: Find message  by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: messageId
      produces:
      - application/json
      - application/xml
      parameters:
      - name: messageId
        in: path
        description: messageId of message that needs to be fetched
        required: true
        type: integer
        maximum: 10.0
        minimum: 1.0
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
    delete:
      tags:
      - messages
      summary: Delete message by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: Id
      produces:
      - application/json
      - application/xml
      parameters:
      - name: messageId
        in: path
        description: ID of the message that needs to be deleted
        required: true
        type: integer
        minimum: 1.0
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Message not found
  /auth/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /auth/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        400:
          description: Invalid username/password supplied
  /users:
    get:
      tags:
      - user
      summary: Fetch all users
      operationId: getusers
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Invalid ID supplied
        404:
          description: Message not foundd
definitions:
  Message:
    type: object
    properties:
      status:
        type: integer
        format: int64
      data:
        $ref: '#/definitions/Message_data'
    xml:
      name: Message
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Message_data:
    properties:
      Id:
        type: integer
        format: int32
      senderId:
        type: integer
        format: int32
      message:
        type: string
      recieverId:
        type: integer
        format: int32
      createdOn:
        type: string
        format: date-time
      status:
        type: boolean
        default: false
